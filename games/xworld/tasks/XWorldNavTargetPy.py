import random

"""
This file implements an xworld teaching task.
The task class contains several stage functions.
Each stage function currently must have two inputs:

A list of entities, where each entity is a dict:
  id        - unique str for this entity
  type      - "agent", "goal", "block"
  location  - (x, y, z)
  (optional:)
  name      - name of the entity
  color     - color of the entity

The world dimensions:
  X         - width
  Y         - height
  Z         - depth

And must return three outputs:

next_stage  - the name of the next stage function
reward      - the reward of the current stage
sentence    - the sentence generated by the current stage

Finally, the function get_stage_names() return all the stage functions the
user wants to register.
"""

class XWorldNavTargetPy:
    def __init__(self):
        self.target_location = (-1, -1, -1)

    def idle(self, entities, dimensions):
        """
        Start a task
        """
        goals = [e for e in entities if e["type"] == "goal"]
        assert len(goals) > 0, "there is no goal on the map!"
        sel_goal = random.choice(goals)
        self.target_location = sel_goal["location"];
        return ["reward", 0.0, "Please go to " + sel_goal["name"]]

    def reward(self, entities, dimensions):
        """
        Giving reward to the agent
        """
        agent = [e for e in entities if e["type"] == "agent"]
        assert len(agent) == 1
        agent = agent[0]
        reward = -0.1  # time penalty
        next_stage = "reward" # self loop
        sentence = ""
        if agent["location"] == self.target_location:
            reward += 1.0 # correct goal
            next_stage = "idle" # task end
            sentence = "well done!"
        return [next_stage, reward, sentence]

    def get_stage_names(self):
        """
        return all the stage names; does not have to be in order
        """
        return ["idle", "reward"]
