import random
from xworld3d_task import XWorld3DTask
from maze2d import print_env

"""
This file implements an xworld teaching task.
The task class contains several stage functions.

Each stage function must return three outputs:

next_stage  - the name of the next stage function
reward      - the reward of the current stage
sentence    - the sentence generated by the current stage

Finally, the function get_stage_names() return all the stage functions the
user wants to register.

This task asks the agent to navigate to a position so that it puts a certain object nearby, and
in front of, behind, to the left of, or to the right of, the agent (from the agent's perspective).

Example:
Please put the apple to the left of you.
"""

class XWorld3DNavTargetSide(XWorld3DTask):
    def __init__(self, env):
        super(XWorld3DNavTargetSide, self).__init__(env)

    def idle(self):
        dt = 1.5 # eight connected neighborhood
        goals = self._get_goals()
        ## because agent loc is continuous, we have to rely on its init position for path search
        init_agent_loc = self.env.init_agent_loc

        goals = [g for g in goals if \
                 [e for e in self._get_surrounding_empty_grids(distance_threshold=dt, refer=g) if \
                  self._reachable(init_agent_loc, e)]]

        if goals:
            goal = random.choice(goals)
            direction = random.choice(['left', 'right', 'front', 'behind'])
            self._record_target((goal.loc, dt, direction));
            self._bind("S -> start")
            self._bind("P -> %s" % direction.upper())
            self._bind("G -> '" + goal.name + "'")
            self.sentence = self._generate()
            return ["simple_navigation_reward", 0.0, self.sentence]

        return ["idle", 0.0, ""]

    def get_stage_names(self):
        """
        return all the stage names; does not have to be in order
        """
        return ["idle", "simple_navigation_reward"]

    def _define_grammar(self):
        all_goal_names = self._get_all_goal_names_as_rhs()
        grammar_str = """
        S --> start | timeup | correct | wrong
        start -> I0 | I1 | I2 | I3
        correct -> 'Well' 'done' '!'
        wrong -> 'Wrong' '!'
        timeup -> 'Time' 'up' '.'
        I0 -> A LL G NP '.'
        I1 -> M G NP '.'
        I2 -> Y A LL G NP '?'
        I3 -> Y M G NP '?'
        A -> 'go' 'to' | 'navigate' 'to' | 'reach' | 'move' 'to'
        LL -> L C
        L -> 'the' 'location' | 'the' 'grid' | 'the' 'place'
        M -> 'move' C | 'navigate' C
        C -> 'so' 'that' | 'such' 'that'
        NP -> 'is' P 'you'
        P --> LEFT | RIGHT | BEHIND | FRONT
        LEFT -> 'left' 'of' | 'to' 'the' 'left' 'of'
        RIGHT -> 'right' 'of' | 'to' 'the' 'right' 'of'
        BEHIND -> 'behind'
        FRONT -> 'in' 'the' 'front' 'of' | 'front' 'of'
        Y -> 'Could' 'you' 'please' | 'Can' 'you' | 'Will' 'you'
        G --> %s
        """ % all_goal_names
        return grammar_str, "S"
