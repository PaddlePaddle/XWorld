import random
from xworld3d_task import XWorld3DTask
from maze2d import print_env

"""
This file implements an xworld teaching task.
The task class contains several stage functions.

Each stage function must return three outputs:

next_stage  - the name of the next stage function
reward      - the reward of the current stage
sentence    - the sentence generated by the current stage

Finally, the function get_stage_names() return all the stage functions the
user wants to register.

This task askes the agent to go to an object that is referred to by another nearby object.

Example:
Please go to the object that is near the apple.
"""

class XWorld3DNavTargetNear(XWorld3DTask):
    def __init__(self, env):
        super(XWorld3DNavTargetNear, self).__init__(env)

    def idle(self):
        goals = self._get_goals()
        agent, _, _ = self._get_agent()

        assert len(goals) >= 2, "This task must have at least two goals"

        self._delete_entity(agent)

        random.shuffle(goals)
        g1, g2 = goals[:2]
        # delete goals to make space
        self._delete_entity(g1)
        self._delete_entity(g2)

        pairs = self._get_p_tiles()
        assert pairs, "map too crowded?"

        random.shuffle(pairs)
        g1.loc, g2.loc = pairs[0]
        self._set_entity_inst(g1)
        self._set_entity_inst(g2)

        ## move agent to the new position
        new_a = self._propagate_agent([g2.loc])
        assert new_a, "get_p_tiles() is buggy"
        agent.loc, _ = random.choice(new_a)
        self._set_entity_inst(agent)

        ## multiple answers
        self._record_target(self._get_surrounding_goals(refer=g1.loc));
        self._bind("S -> start")
        self._bind("G -> '" + g1.name + "'")
        self.sentence = self._generate()
        return ["navigation_reward", 0.0, self.sentence]

    def navigation_reward(self):
        reward, time_out = self._time_reward()
        next_stage = "navigation_reward"
        if not time_out:
            agent, _, _ = self._get_agent()
            objects_reach_test = [g.id for g in self._get_goals() \
                                  if self._reach_object(agent.loc, agent.yaw, g)]
            if [t for t in self.target if t.id in objects_reach_test]:
                reward = self._successful_goal(reward)
                next_stage = "terminal"
            elif objects_reach_test:
                reward = self._failed_goal(reward)
                next_stage = "terminal"
        else:
            next_stage = "terminal"
        return [next_stage, reward, self.sentence]

    def get_stage_names(self):
        """
        return all the stage names; does not have to be in order
        """
        return ["idle", "navigation_reward", "terminal"]

    def _define_grammar(self):
        all_goal_names = self._get_all_goal_names_as_rhs()
        grammar_str = """
        S --> start | timeup | correct | wrong
        start -> I0 | I1 | I2 | I3 | I4
        correct -> 'Well' 'done' '!'
        wrong -> 'Wrong' '!'
        timeup -> 'Time' 'up' '.'
        I0 -> A NP G
        I1 -> A NP G 'please' '.'
        I2 -> 'Please' A NP G '.'
        I3 -> NP G 'is' 'your' D '.'
        I4 -> Y A NP G '?'
        A -> 'go' 'to' | 'navigate' 'to' | 'reach' | 'move' 'to' | 'collect'
        NP -> 'the' 'object' N
        N -> 'near' | 'by' | 'besides'
        Y -> 'Could' 'you' 'please' | 'Can' 'you' | 'Will' 'you'
        D -> 'destination' | 'target' | 'goal' | 'end'
        G --> %s
        """ % all_goal_names
        return grammar_str, "S"
