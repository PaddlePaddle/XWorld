import random
from xworld3d_task import XWorld3DTask
from maze2d import print_env

"""
This file implements an xworld teaching task.
The task class contains several stage functions.

Each stage function must return three outputs:

next_stage  - the name of the next stage function
reward      - the reward of the current stage
sentence    - the sentence generated by the current stage

Finally, the function get_stage_names() return all the stage functions the
user wants to register.

This task asks the agent to go to a certain object.

Example:
Please go to the apple.
"""

class XWorld3DNavTarget(XWorld3DTask):
    def __init__(self, env):
        super(XWorld3DNavTarget, self).__init__(env)

    def idle(self):
        goals = self._get_goals()
        init_agent_loc = self.env.init_agent_loc
        targets = [g for g in goals if self._reachable(init_agent_loc, g.loc)]

        if len(targets) == 0:
            Y, X = self.env.get_dims()
            print_env(X, Y, self._get_entities())
            print([g.loc for g in goals])
            print(init_agent_loc)
            assert False, "There must be some targets"

        sel_goal = random.choice(targets)
        self._record_target(sel_goal);
        self._bind("S -> start")
        self._bind("G -> '" + sel_goal.name + "'")
        self.sentence = self._generate()
        return ["simple_navigation_reward", 0.0, self.sentence]

    def get_stage_names(self):
        """
        return all the stage names; does not have to be in order
        """
        return ["idle", "simple_navigation_reward"]

    def _define_grammar(self):
        all_goal_names = self._get_all_goal_names_as_rhs()
        grammar_str = """
        S --> start | timeup | correct | wrong
        start -> I0 | I1 | I2 | I3 | I4 | I5 | I6
        correct -> 'Well' 'done' '!'
        wrong -> 'Wrong' '!'
        timeup -> 'Time' 'up' '.'
        I0 -> G
        I1 -> A G 'please' '.'
        I2 -> 'Please' A G '.'
        I3 -> A G '.'
        I4 -> G 'is' 'your' D '.'
        I5 -> G 'is' 'the' D '.'
        I6 -> Y A G '?'
        A -> 'go' 'to' | 'navigate' 'to' | 'reach' | 'move' 'to' | 'collect'
        Y -> 'Could' 'you' 'please' | 'Can' 'you' | 'Will' 'you'
        D -> 'destination' | 'target' | 'goal' | 'end'
        G --> %s
        """ % all_goal_names
        return grammar_str, "S"
